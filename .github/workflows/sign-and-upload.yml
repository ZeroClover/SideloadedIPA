name: Sign and Upload IPAs

on:
  workflow_dispatch:
    inputs:
      debug:
        description: Enable SSH Debug
        required: false
        default: false
        type: boolean
  repository_dispatch:
    types: [sign_ipas]

permissions:
  contents: read

jobs:
  sign-and-upload:
    name: Sign & Upload IPAs
    runs-on: macos-latest
    env:
      # Required secrets
      APPLE_DEV_CERT_P12_ENCODED: ${{ secrets.APPLE_DEV_CERT_P12_ENCODED }}
      APPLE_DEV_CERT_PASSWORD: ${{ secrets.APPLE_DEV_CERT_PASSWORD }}
      ASSETS_SERVER_IP: ${{ secrets.ASSETS_SERVER_IP }}
      ASSETS_SERVER_USER: ${{ secrets.ASSETS_SERVER_USER }}
      ASSETS_SERVER_CREDENTIALS: ${{ secrets.ASSETS_SERVER_CREDENTIALS }}
      JHENTAI_MOBILEPROVISION: ${{ secrets.JHENTAI_MOBILEPROVISION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Import Apple signing certs into Keychain
        id: import-certs
        uses: apple-actions/import-codesign-certs@v5
        with:
          # Uses default keychain name 'signing_temp' and create-keychain: true
          p12-file-base64: ${{ env.APPLE_DEV_CERT_P12_ENCODED }}
          p12-password: ${{ env.APPLE_DEV_CERT_PASSWORD }}

      - name: Resolve keychain path and discover identity
        run: |
          # Export the generated password and keychain name for downstream steps (if needed)
          echo "KEYCHAIN_PASSWORD=${{ steps.import-certs.outputs.keychain-password }}" >> "$GITHUB_ENV"
          echo "KEYCHAIN_NAME=signing_temp" >> "$GITHUB_ENV"
          
          # Construct the keychain path based on the default naming convention
          kc_path="$HOME/Library/Keychains/signing_temp.keychain-db"
          echo "KEYCHAIN_PATH=$kc_path" >> "$GITHUB_ENV"
          
          # Debug: Show keychain path and check if file exists
          echo "Using keychain path: $kc_path"
          echo "Keychain exists: $(test -f "$kc_path" && echo 'yes' || echo 'no')"
          echo "Keychain permissions: $(ls -la "$kc_path" 2>/dev/null || echo 'file not found')"

          # Ensure keychain is unlocked (action should do this, but be safe)
          if [[ -n "${{ steps.import-certs.outputs.keychain-password }}" && -f "$kc_path" ]]; then
            security unlock-keychain -p "${{ steps.import-certs.outputs.keychain-password }}" "$kc_path" || true
          fi

          # Discover a valid codesigning identity from that keychain specifically
          echo "Searching for identities in: $kc_path"
          ident=$(security find-identity -v -p codesigning "$kc_path" | awk -F '"' '/Apple (Development|Distribution)|iPhone/{print $2; exit}')
          if [[ -z "$ident" ]]; then
            echo "No code signing identity found in $kc_path" >&2
            echo "Full output from security find-identity:"
            security find-identity -v -p codesigning "$kc_path" || true
            exit 1
          fi
          echo "Found identity: $ident"
          echo "CODESIGN_IDENTITY=$ident" >> "$GITHUB_ENV"

      - name: Install fastlane and sshpass
        run: |
          brew update
          brew install fastlane hudochenkov/sshpass/sshpass

      - name: Run signer
        run: python scripts/run_signing.py

      - name: "Debug: Configure SSH public key for runner"
        if: ${{ always() && github.event_name == 'workflow_dispatch' && (github.event.inputs.debug == true || github.event.inputs.debug == 'true' || github.event.inputs.debug == '1') }}
        env:
          PUBKEY: ${{ secrets.DEBUG_SSH_PUBLIC_KEY }}
        run: |
          set -euo pipefail
          if [[ -z "${PUBKEY:-}" ]]; then
            echo "DEBUG_SSH_PUBLIC_KEY is required when debug is enabled." >&2
            exit 1
          fi
          mkdir -p "$HOME/.ssh"
          chmod 700 "$HOME/.ssh"
          echo "$PUBKEY" > "$HOME/.ssh/authorized_keys"
          chmod 600 "$HOME/.ssh/authorized_keys"

      - name: "Debug: Enable SSH Server"
        if: ${{ always() && github.event_name == 'workflow_dispatch' && (github.event.inputs.debug == true || github.event.inputs.debug == 'true' || github.event.inputs.debug == '1') }}
        run: |
          set -euxo pipefail
          echo "SSH_Port=22" >> "$GITHUB_ENV"
          # Ensure pubkey auth is enabled and password auth disabled
          # Enable Remote Login and ensure sshd is loaded and started
          sudo systemsetup -setremotelogin on

      - name: "Debug: Install cloudflared"
        if: ${{ always() && github.event_name == 'workflow_dispatch' && (github.event.inputs.debug == true || github.event.inputs.debug == 'true' || github.event.inputs.debug == '1') }}
        run: |
          set -euxo pipefail
          brew install cloudflared

      - name: "Debug: Run cloudflared tunnel"
        if: ${{ always() && github.event_name == 'workflow_dispatch' && (github.event.inputs.debug == true || github.event.inputs.debug == 'true' || github.event.inputs.debug == '1') }}
        env:
          SSH_Port: ${{ env.SSH_Port }}
        run: |
          set -euo pipefail
          cloudflared --no-autoupdate --url "ssh://localhost:${SSH_Port:-22}" 2>&1 | tee cloudflared.log
